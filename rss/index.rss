<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Good Kid, Hack City</title><description>A journey</description><link>http://localhost:2368/</link><generator>Ghost 0.7</generator><lastBuildDate>Fri, 29 Jan 2016 06:44:03 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>The Joys of Continuous Integration</title><description>&lt;p&gt;On my current project, I've been tasked with some of the DevOps tasks, including continuous integration.  I didn't really know much about this process, so I've had to figure a lot of stuff out as I went.  I'm sure some of my techniques and methodologies were not best practices, but&lt;/p&gt;</description><link>http://localhost:2368/the-joys-of-continuous-deployment/</link><guid isPermaLink="false">bd9f2457-4f1d-4e3b-83cf-9a5a43ddd11a</guid><dc:creator>Adam Grimm</dc:creator><pubDate>Fri, 29 Jan 2016 06:41:59 GMT</pubDate><content:encoded>&lt;p&gt;On my current project, I've been tasked with some of the DevOps tasks, including continuous integration.  I didn't really know much about this process, so I've had to figure a lot of stuff out as I went.  I'm sure some of my techniques and methodologies were not best practices, but I wanted to share my experience and some of the troubles I've had along the way.&lt;/p&gt;

&lt;h5 id="whatshouldtheworkflowbe"&gt;What should the workflow be?&lt;/h5&gt;

&lt;p&gt;This is a question you will need to ask yourself before determining your CI methodology.  Different groups will likely have their own preferences on how they prefer the workflow.  &lt;/p&gt;

&lt;p&gt;My group knew we wanted to requirements on style, linting, and tests upstream of any updates to the master group repository.  We also decided it would be best to have a 'staging' deployment area that would be automatically set up on any merges to the master branch on GitHub.  When this staging area was properly vetted, the project could be moved to the 'production' server.&lt;/p&gt;

&lt;h5 id="wherearethecheckpoints"&gt;Where are the checkpoints?&lt;/h5&gt;

&lt;p&gt;Sure, it's obvious that tests and consistent style are good things.  But where should our automated tools check for these?&lt;/p&gt;

&lt;p&gt;I implemented a pre-commit hook for the linting and style checking processes.  I used the pre-commit npm module to set the hook, JSHint for the linting, and JSCS for the style checks.  We decided that it would be best to prevent each user from committing code with style and linting errors, as we didn't want to be caught off guard by a laundry list of things to clean up when we decided to make a pull request.&lt;/p&gt;

&lt;p&gt;The automated testing checkpoint was placed on the organizational GitHub repo.  We have a private repo, which doesn't play well with automated testing on pull requests.  Our scheme is to push code directly to a user branch on the organizational repo, which triggers the automated testing (powered by Circle CI).  This runs our gulp testing task.  When the user makes a pull request from his organizational branch to the organizational master, the results of the Circle CI testing are displayed.&lt;/p&gt;

&lt;p&gt;We also decided to integrate testing into the automated deployment process, just in case anything about the AWS environment disrupts our application.&lt;/p&gt;

&lt;h4 id="automateddeployment"&gt;Automated Deployment&lt;/h4&gt;

&lt;p&gt;Deployment is a drag, and I don't want to have to manually trigger deployment every time my codebase is updated.  Enter AWS CodeDeploy.  This tool listens for changes to the default branch of a specified repo and deploys the new revision to your AWS instance automatically.  You can include a yaml file and various shell scripts to run at various parts of the deployment process.  For example, I know I want &lt;code&gt;npm install&lt;/code&gt; to run every time the app is deployed in case new dependencies are included.&lt;/p&gt;

&lt;p&gt;One potential pratfall: the AWS yaml file allows you to set hooks at various points in the install process to run your script files.  One of these hooks is on "ApplicationStop."  This occurs before deployment of the new revision, and actually runs existing script files before replacing them with the new code.  Now, imagine that your ApplicationStop script is bugged.  Since the deployment process halts on any failing script, your auto deploy will never be able to replace the bad script with a functional one!  Fortunately, there is a way to manually deploy using the AWS CLI and ignore the ApplicationStop hook.&lt;/p&gt;

&lt;h5 id="summary"&gt;Summary&lt;/h5&gt;

&lt;p&gt;Development Operations are time consuming and can be very frustrating.  However, a good development environment can pay massive dividends throughout the lifetime of your project.  Just like when planning your code, the DevOps scheme must be carefully planned and architected, but the results are indisputable.&lt;/p&gt;</content:encoded></item><item><title>Matter of CORS</title><description>&lt;p&gt;Cross-origin resource sharing. AKA CORS. AKA The thing that stops you from doing the thing you want to do.  What exactly is CORS, and how do we get around it?&lt;/p&gt;

&lt;h4 id="yourbrowserisaconcernedparent"&gt;Your  browser is a concerned parent...&lt;/h4&gt;

&lt;p&gt;...and remote origins are stranger danger.  CORS is  safeguard implemented by your web browsers&lt;/p&gt;</description><link>http://localhost:2368/matter-of-cors/</link><guid isPermaLink="false">6f804127-463a-42f0-a98f-e3ebb0e8fb98</guid><dc:creator>Adam Grimm</dc:creator><pubDate>Fri, 13 Nov 2015 22:14:02 GMT</pubDate><content:encoded>&lt;p&gt;Cross-origin resource sharing. AKA CORS. AKA The thing that stops you from doing the thing you want to do.  What exactly is CORS, and how do we get around it?&lt;/p&gt;

&lt;h4 id="yourbrowserisaconcernedparent"&gt;Your  browser is a concerned parent...&lt;/h4&gt;

&lt;p&gt;...and remote origins are stranger danger.  CORS is  safeguard implemented by your web browsers to prevent a website you trust from giving you resources from a website you don't trust.&lt;/p&gt;

&lt;p&gt;The short of it is that the browser will not allow the current webpage to make an AJAX request to a different site -- the resources cannot be shared across origins.&lt;/p&gt;

&lt;p&gt;Let me re-iterate that your browser is the one implementing this safeguard.  For better or for worse.  This can be frustrating, especially because...&lt;/p&gt;

&lt;h4 id="corsdoesntsolvetheproblem"&gt;CORS doesn't solve the problem&lt;/h4&gt;

&lt;p&gt;There are many ways for malicious sites to get around the CORS problem.  For one, CORS only stops AJAX requests.  That means a malicious site can still make non-AJAX HTTP requests (say, using a form submission) to access transfer data to a site of another origin.&lt;/p&gt;

&lt;p&gt;It is also possible for the attacker to convince the trustworthy site to run the malicious code.  This is known as cross-site scripting (XSS), and CORS does nothing to prevent it.&lt;/p&gt;

&lt;h4 id="howcaniatrustworthydevelopergetaroundcorssoicanaccessresourcesfromothersites"&gt;How can I, a trustworthy developer, get around CORS so I can access resources from other sites?&lt;/h4&gt;

&lt;p&gt;There are a few options.  Some servers implicitly allows CORS requests.  The way this works is that the browser first checks in with the cross-origin server to see if it allows CORS.  If it does, then the AJAX request can be completed.  This means that if you want a server you control to talk to another server you control, you can specify CORS permissions between the two servers and your browser won't complain.&lt;/p&gt;

&lt;p&gt;You can also use iframes, which allows you to embed another HTML document within your own HTML document.  This could let you embed some content from Facebook (say, their commenting service) and let Facebook's own iframe, on your page, transmit data to Facebook.&lt;/p&gt;

&lt;p&gt;Lastly, if the data you want to access lives in a javascript file on another site, then you are in luck.  CORS does not prevent script tags from loading javascript files from a different origin!  However, to actually use this data, you will likely need to wrap the cross-origin javascript file in some javascript of your own, so you can access their variables.  This can be accomplished with JSONP.&lt;/p&gt;

&lt;p&gt;JSONP allows you to make a pseudo-AJAX call to a javascript file on a server and specify a wrapper function.  The wrapper function will run when the javascript data is returned and will have access to the variables located in the cross-origin javascript's scope.  This lets us bypass CORS!  JSONP can be a little tricky to implement though, and only works if there is a javascript file hosted on another service that we want to access, so it's not a cure-all.&lt;/p&gt;

&lt;h3 id="ultimately"&gt;Ultimately&lt;/h3&gt;

&lt;p&gt;CORS is kind of a bummer.  Our browsers' are trying to protect us, but frankly they are as much as a detriment to honest developers as they are to malicious ones.  And CORS isn't entirely affective against in the latter case either.  Fortunately, if you know what you want to do, there are ways to bypass CORS and get the information you are searching for.  Good luck!&lt;/p&gt;</content:encoded></item><item><title>How I keep breaking Promises</title><description>&lt;p&gt;Promises are a useful tool when dealing with asynchronous operations in Javascript.  They do some clean-up work to make your script read more like prose and have some neat methods to join your asynchronous functions together under one umbrella.  However, while the goal of Promises is to make your life&lt;/p&gt;</description><link>http://localhost:2368/how-i-keep-breaking-promises/</link><guid isPermaLink="false">4027c1cf-ff83-4084-bba9-8dda2818670f</guid><dc:creator>Adam Grimm</dc:creator><pubDate>Mon, 02 Nov 2015 05:46:44 GMT</pubDate><content:encoded>&lt;p&gt;Promises are a useful tool when dealing with asynchronous operations in Javascript.  They do some clean-up work to make your script read more like prose and have some neat methods to join your asynchronous functions together under one umbrella.  However, while the goal of Promises is to make your life easier, I've learned that the opposite effect is often achieved.  So let's talk about Promises and how to, and how to not, use them!&lt;/p&gt;

&lt;h4 id="whatarethesethings"&gt;What are these things?&lt;/h4&gt;

&lt;p&gt;Promises are a way to create an 'alternate timeline' for a sequence of events that rely on some asynchronous behavior.  They are &lt;em&gt;not&lt;/em&gt; a means of freezing time; any code you have not associated with your promise, or promise chain, will keep on running while your promise waits to resolve.  &lt;/p&gt;

&lt;p&gt;A promise chain consists of two or more functions that rely on some output from asynchronous behavior before running.  The first function makes a promise to the second function that it will give it some data in the future.  The second function waits.  &lt;em&gt;THE REST OF YOUR CODE DOES NOT WAIT!&lt;/em&gt;   When the promise resolves, it passes its results to the second function.  The third function now waits for the second function, etc, until the chain is complete.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Promises do not return a result!&lt;/em&gt;  Well, not in the way you would expect.  You can't write&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var result = somePromise(arg1);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and expect to get some value back for result.  &lt;/p&gt;

&lt;h4 id="sohowdoiusepromises"&gt;So how do I use Promises?&lt;/h4&gt;

&lt;p&gt;Promises demand that you provide a function to act on their results.  This function is passed as an argument in a .then method applied to the Promise in question.  Like so:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;somePromise(args).then(function(result){
    console.log('The result was ', result);
});&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is the basic form of a promise chain.  All we are doing here is telling the 2nd action (the console log) to wait for the 1st action (the promise) to finish it's task before the 2nd action occurs.  &lt;/p&gt;

&lt;p&gt;&lt;em&gt;The result of a Promise will always be passed as the first argument to whatever function shows up in the next .then call.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So we can use this to set up a longer chain:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;somePromise(args).then(function(radius){
    return radius*2;
})
.then(function(diameter){
    return diameter*3.14159;
})
.then(function(circumference){
    console.log('The circumference is ' + circumference);
});&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Admittedly, this looks a little goofy when we are just chaining synchronous code together.  But that's just an example.  Promises show their use when asynchronous functions are in play:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;readFromFile(fileName).then(function(fileData){
    return queryDatabaseForData(fileData);
}).then(function(databaseData){
    return writeToFile(databaseData);
})&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It should be apparent now why Promises are useful.  In a clear and concise manner, we have built series of asynchronous function calls into a block of code that will run in a coherent manner.&lt;/p&gt;

&lt;h4 id="sowhatsthecatch"&gt;So what's the catch?&lt;/h4&gt;

&lt;p&gt;See all those asynchronous functions up there?  readFromFile, queryDatabaseForData, and writeToFile?  These are all functions that return promises.  &lt;em&gt;If your asynchronous operations do not return a Promise, the special waiting behavior of Promises will be broken.&lt;/em&gt;  In short, if you want the downstream code in your chain to wait, you need to return a Promise in the upstream code or only have synchronous operations.&lt;/p&gt;

&lt;p&gt;I screw this part up a lot.  Sometimes I try to make generic asynchronous calls in my .then functions, or other times I forget to return the Promise I've invoked.  Either of these things will make your code behave in a way you don't want it to.&lt;/p&gt;

&lt;h4 id="otherneatthingsyoucando"&gt;Other neat things you can do&lt;/h4&gt;

&lt;p&gt;Promises have other related functionality that can really come in handy.  For example, Promise.all takes an array of Promises, and doesn't move to the 'then' behavior until they have all resolved.  The data produced will be an array storing the data from each Promise resolution, in the order they exist in the array:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Promise.all([Promise1, Promise2, Promise3]).then(function(results){
   for(var i = 0; i &amp;lt; results.length; i++){
       console.log('The result of Promise ' + i + ' was ' + results[i]);
   }
});&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Another neat one is Promise.race, which lets you provide an array of Promises and see which one finishes first.&lt;/p&gt;

&lt;h4 id="closingthoughts"&gt;Closing thoughts&lt;/h4&gt;

&lt;p&gt;Promises are clean and practical when you apply them correctly, but I recommended spending some time with the documentation before trying to implement them yourself.  Look at how to generate your own promises -- when you can apply the Promise.promisify function, and what to do when you can't.  Look into error handling, which is also made tidy by Promises (with a possible loss in functionality).&lt;/p&gt;

&lt;p&gt;But don't let some of the complexity scare you away.  You don't have to understand all the nitty gritty to make Promises work for you!&lt;/p&gt;</content:encoded></item><item><title>On Backbone</title><description>&lt;p&gt;I've been learning how to utilize the Backbone framework recently and I wanted to share some of my findings.  While flexibility is a point in Backbone's favor, this seems to have lead to a lack of agreed-upon best practices and some uncertainty on how exactly to fit the various views&lt;/p&gt;</description><link>http://localhost:2368/on-backbone/</link><guid isPermaLink="false">b5691711-4975-4bed-9266-5e1d0b74d574</guid><dc:creator>Adam Grimm</dc:creator><pubDate>Sun, 25 Oct 2015 19:53:22 GMT</pubDate><content:encoded>&lt;p&gt;I've been learning how to utilize the Backbone framework recently and I wanted to share some of my findings.  While flexibility is a point in Backbone's favor, this seems to have lead to a lack of agreed-upon best practices and some uncertainty on how exactly to fit the various views and models together.  Below is some of my insight on the matter.&lt;/p&gt;

&lt;h5 id="views"&gt;Views&lt;/h5&gt;

&lt;p&gt;Views are used to generate and interact with everything on the DOM.  Each view should represent some cohesive unit displayed on the DOM.  Often, a parent view will contain multiple sub-views for each unit created.  For example, on a twitter-esque application, views would be created for each tweet displayed.  A parent view would hold all of these tweet views and represent the 'tweets' area of the page.  &lt;/p&gt;

&lt;p&gt;When variable data is required to generate the view, a model or collection should be included in the view to hold that data.  If the DOM elements do not rely on a changing data source, no model is required.&lt;/p&gt;

&lt;p&gt;Views listen to DOM events via the 'events' object, which is a Backbone-supported property of the View class.  If a view needs to listen for model or view events, these listeners are created upon initialization of the view (typically).  They should not be put in the 'events' property.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Views should only be used to interact with the DOM.&lt;/strong&gt;  Any code required to manipulate data should be passed off to the corresponding model or collection.&lt;/p&gt;

&lt;h5 id="models"&gt;Models&lt;/h5&gt;

&lt;p&gt;Models contain and interact with the app's data.  Like views, models should be created to represent a cohesive set of data, to as low of a level as makes sense.  For example, while one model could be used to hold all of the messages displayed on the screen in a chat application, instead each message should be represented by its own model.  If there are a group of models of the same type, these can all be wrapped up in a Collection.&lt;/p&gt;

&lt;p&gt;Models are often properties of views, but never the other way around.  This means that when the user provides data via the DOM, the View must pass that information off to its model.  The model cannot listen for the data or events directly.  Models can however listen for other model events if they are included as properties.&lt;/p&gt;

&lt;p&gt;This may tempt the designer to nest models within other models for the sake of event listening when the application structures does not merit this.  To keep everything organized and clean, models should only have sub-models as properties when it is logical that the sub-model would belong to its parent in the context of the application.  This can sometimes lead to data being passed through multiple models and views to arrive at their necessary destination.  This is ok!  It is far easier to grok the flow of data through your Backbone application when a coherent and logical framework is established.&lt;/p&gt;

&lt;p&gt;Application-logic should be placed in the lowest level model possible.  For example, it is possible to send all data up to the highest-level model and allow decision making to occur there.  However, it is preferred to let the sub-models handle this logic at the lowest-level possible.  In this way, tasks are delegated in a consistent manner.&lt;/p&gt;

&lt;h5 id="collections"&gt;Collections&lt;/h5&gt;

&lt;p&gt;Collections represent a group of same-type Models that behave similarly.  Frankly, I'm not entirely sure what the upside is for using a Collection in place of a Model, which could potentially store an array or object of sub-models.  It seems like Backbone recognizes that this is a very common pattern and has provided a Collection class with some helper functions to better help you manage the sub-models.  I think it is most helpful to think of Collections in the same way as Models, but for a specific use.&lt;/p&gt;

&lt;h5 id="somebigpicturestuff"&gt;Some Big Picture Stuff&lt;/h5&gt;

&lt;p&gt;As I get more familiar with the idea of an MVC framework, it becomes more apparent to me that the bottom line is not always efficiency and ease-of-use.  Passing data around the models and views can be inefficient and generate unnecessary code.  So why do we do it?&lt;/p&gt;

&lt;p&gt;The benefit is a consistent structure and modularity.  As my applications get larger and more complex, it becomes very obvious that having a home for each piece of your code is extremely advantageous.  When new logic must be introduced, it should be apparent where in your framework it should go.  The structure of your application and the structure of your code are mirrored, which greatly contributes to the concept of self-documenting code.  &lt;/p&gt;

&lt;p&gt;Ultimately, working with a framework for the first time can be frustrating, as it restricts the developer's ability to do certain things.  Hopefully this post will help you understand how to make the framework work for you instead of the other way around!&lt;/p&gt;</content:encoded></item><item><title>Scrabble Tree</title><description>&lt;p&gt;The problem: design a data structure that finds every English word that can be made from a given bag of Scrabble letters&lt;/p&gt;

&lt;p&gt;What data structure is best suited for this application?  In contemplating this problem, I imagined a structure that contained every word, and as we queried it with a&lt;/p&gt;</description><link>http://localhost:2368/scrabble-tree/</link><guid isPermaLink="false">19e3682e-9493-416d-8f47-31162737341e</guid><dc:creator>Adam Grimm</dc:creator><pubDate>Mon, 12 Oct 2015 05:23:36 GMT</pubDate><content:encoded>&lt;p&gt;The problem: design a data structure that finds every English word that can be made from a given bag of Scrabble letters&lt;/p&gt;

&lt;p&gt;What data structure is best suited for this application?  In contemplating this problem, I imagined a structure that contained every word, and as we queried it with a group of letters, the list of potential words we could find would decrease as we removed each letter from our list until we honed in on our desired results.  &lt;/p&gt;

&lt;p&gt;I think a tree is the best answer here.  We can build a tree in which each node holds a letter, and the children of each node represent the subset of words that begin with the letters we have traversed to get to this node.&lt;/p&gt;

&lt;p&gt;For example, if we wanted to build this data structure using only the words "be", "bee", "been", "beer", and "beg", it would look like this: &lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/10/Tree-1.png" alt="example tree"&gt;&lt;/p&gt;

&lt;p&gt;The periods are used to indicate the end of a word.&lt;/p&gt;

&lt;p&gt;When we want to find words from a collection of letters, we travel down the tree, looking for children that are in our letters collection.  When we find a period, we know we have completed a word and can bubble that result back up the chain.  In pseudocode, the function looks like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;function findWords(letters){
  declare a foundWords array
  remove the current letter from the letters array
  if this.children contains '.'
    add the current letter to foundWords&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;iterate over all of this's children
  if you find a letter in the letters array
    call findWords on that child, passing in letters
    prepend the current letter to each value returned from the child's findWords call
    add these values to the foundWords array&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;return foundWords
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I'm not certain what the time complexity of this operation is.  Looking for words involves iterating over a node's children, finding one (or more), and then iterating over that node's children etc etc until we run out of letters to search for.  We don't have to look at every node; large swaths of the tree are almost certain to be ignored in each lookup.  However, more words in the tree does mean the operation will likely take longer, as you will probably find more words.  Does this point to linear time?&lt;/p&gt;

&lt;p&gt;Or, is the operation linear with respect to the number of letters you are searching for?  &lt;/p&gt;

&lt;p&gt;Anyone have any insight in this?&lt;/p&gt;</content:encoded></item><item><title>The Basics</title><description>&lt;p&gt;Hi.  I started a blog.  Surprised?  Me too.  But I told myself I'm going to jump into this thing with two feet.  Here's my best effort.&lt;/p&gt;

&lt;h3 id="what"&gt;What?&lt;/h3&gt;

&lt;p&gt;I moved to San Francisco to attend Hack Reactor, an accelerated learning program designed to equip me with the required tools to be&lt;/p&gt;</description><link>http://localhost:2368/first-for-everything/</link><guid isPermaLink="false">23c3b709-c246-439e-a693-e82c0017fb87</guid><dc:creator>Adam Grimm</dc:creator><pubDate>Tue, 29 Sep 2015 02:51:29 GMT</pubDate><content:encoded>&lt;p&gt;Hi.  I started a blog.  Surprised?  Me too.  But I told myself I'm going to jump into this thing with two feet.  Here's my best effort.&lt;/p&gt;

&lt;h3 id="what"&gt;What?&lt;/h3&gt;

&lt;p&gt;I moved to San Francisco to attend Hack Reactor, an accelerated learning program designed to equip me with the required tools to be a software engineer.  Some of those tools involve engineering software.  One of those tools is, apparently, blogging.  So this is that blog.  I intend to write about stuff I learn in and out of class.  Hopefully not too much personal stuff, for everyone's sake.&lt;/p&gt;

&lt;h3 id="who"&gt;Who?&lt;/h3&gt;

&lt;p&gt;Adam Tobias Grimm.  Born 15 November 1986.  Caucasian male from the Midwest.  Studied Chemical Engineering at Washington University in Saint Louis.  Employed in that field 2008-2015.&lt;/p&gt;

&lt;p&gt;I'm a Scorpio.&lt;/p&gt;

&lt;h3 id="why"&gt;Why?&lt;/h3&gt;

&lt;p&gt;According to &lt;a href="http://blog.codinghorror.com/the-one-thing-every-software-engineer-should-know/"&gt;this&lt;/a&gt;, to give myself the best shot at my potential career in software development, I need to market myself.  This is a new paradigm for me (or at least, buying into it is new to me) but lots of things are new right now so why not this?  &lt;/p&gt;

&lt;h3 id="when"&gt;When?&lt;/h3&gt;

&lt;p&gt;All day, every day.  &lt;/p&gt;</content:encoded></item></channel></rss>